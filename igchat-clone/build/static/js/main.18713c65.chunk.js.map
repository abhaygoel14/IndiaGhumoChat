{"version":3,"sources":["features/chatSlice.js","components/SideChannel.js","features/userSlice.js","components/firebase.js","components/Sidebar.js","components/ChatHeader.js","components/Message.js","components/Chat.js","components/Login.js","App.js","features/appSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["chatSlice","createSlice","name","initialState","chatId","chatName","reducers","setChatInfo","state","action","payload","actions","selectChatId","chat","selectChatName","SideChannel","id","channelName","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","displayName","prompt","add","Avatar","signOut","src","photo","uid","substring","ChatHeader","Notifications","EditLocation","PeopleAltRounded","placeholder","SearchRounded","SendRounded","HelpRounded","Message","timestamp","message","Date","toDate","toLocaleString","Chat","channelId","messages","setMessages","input","setInput","orderBy","messsage","AddCircle","value","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","CardGiftcard","fontSize","Gif","EmojiEmotions","Login","Button","signInWithPopup","App","onAuthStateChanged","authUser","console","log","email","photoURL","appSlice","setChannelInfo","configureStore","reducer","userReducer","chatReducer","app","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+YAEaA,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAa,CACXC,OAAO,KACPC,SAAU,MAGZC,SAAU,CACTC,YAAY,SAACC,EAAMC,GACfD,EAAMJ,OAAOK,EAAOC,QAAQN,OAC5BI,EAAMH,SAASI,EAAOC,QAAQL,aAKvBE,EAAaP,EAAUW,QAAvBJ,YAEDK,EAAe,SAACJ,GAAD,OAAWA,EAAMK,KAAKT,QACrCU,EAAe,SAACN,GAAD,OAASA,EAAMK,KAAKR,UAEjCL,IAAf,Q,eCJee,MAdf,YAAuC,IAAjBC,EAAgB,EAAhBA,GAAGC,EAAa,EAAbA,YACfC,EAASC,cACP,OACA,qBAAKC,UAAU,iBAAiBC,QAAS,kBAAIH,EAC5CX,EAAY,CACTH,OAAOY,EACPX,SAASY,MAHb,SAKA,+BAAI,sBAAMG,UAAU,kBAAhB,eACJH,Q,4DCXCK,EAAYrB,YAAY,CACnCC,KAAM,OACNC,aAAa,CACXoB,KAAK,MAGPjB,SAAU,CACRkB,MAAO,SAAChB,EAAMC,GAEZD,EAAMe,KAAOd,EAAOC,SAEtBe,OAAQ,SAAAjB,GACNA,EAAMe,KAAO,SAKZ,EAAyBD,EAAUX,QAA3Ba,EAAR,EAAQA,MAAMC,EAAd,EAAcA,OAERC,EAAa,SAAClB,GAAD,OAAWA,EAAMe,KAAKA,MAEjCD,IAAf,Q,mECXOK,EAFYC,IAASC,cATL,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIGC,YAEfC,EAAKV,IAASU,OAEdC,EAAS,IAAIX,IAASU,KAAKE,mBAGlBb,ICsEDc,MA1Ef,WACI,IAAMlB,EAAKmB,YAAYhB,GACvB,EAA6BiB,mBAAS,IAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACNnB,EAAGoB,WAAW,YAAYC,YAAW,SAAAC,GAAQ,OACzCJ,EAAYI,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAClCpC,GAAGoC,EAAIpC,GACPqC,QAAQD,EAAIE,kBAaxB,sBAAKlC,UAAU,UAAf,UACA,sBAAKA,UAAU,gBAAf,UACI,6BAAKG,EAAKgC,cACV,cAAC,IAAD,OAEJ,sBAAKnC,UAAU,UAAf,UACA,sBAAKA,UAAU,gBAAf,UACA,qBAAKA,UAAU,iBAAf,SACA,2CAEA,cAAC,IAAD,CAASC,QAnBQ,WACb,IAAMJ,EAAYuC,OAAO,wBACtBvC,GACCU,EAAGoB,WAAW,YAAYU,IAAI,CAC1BxC,YAAYA,KAgBxBG,UAAU,mBAEV,qBAAKA,UAAU,cAAf,SAEIwB,EAASO,KAAI,gBAAEnC,EAAF,EAAEA,GAAGqC,EAAL,EAAKA,QAAL,OACT,cAAC,EAAD,CAEArC,GAAIA,EACJC,YAAcoC,EAAQpC,aAFjBD,WASb,sBAAKI,UAAU,gBAAf,UACA,cAAC,IAAD,CAAuBA,UAAU,kBAC7B,sBAAKA,UAAU,gBAAf,UACI,iDACK,0CAEb,sBAAKA,UAAY,iBAAjB,UACA,cAAC,IAAD,IACC,cAAC,IAAD,UAGD,qBAAKA,UAAU,cAAf,SACI,cAACsC,EAAA,EAAD,CAAQrC,QAAS,kBAAIiB,EAAKqB,WAAYC,IAAKrC,EAAKsC,MAChDzC,UAAU,yBAEd,sBAAKA,UAAU,kBAAf,UACI,6BAAKG,EAAKgC,cACV,kCAAKhC,EAAKuC,IAAIC,UAAU,EAAE,SAE9B,sBAAK3C,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,W,oEC5DO4C,MArBf,YAAmC,IAAd/C,EAAa,EAAbA,YACT,OACA,sBAAKG,UAAU,aAAf,UACA,qBAAKA,UAAU,WAAf,SACA,+BAAI,sBAAMA,UAAU,kBAAhB,eAA2CH,OAEhD,sBAAKG,UAAU,YAAf,UACI,cAAC6C,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,sBAAK/C,UAAY,aAAjB,UACK,uBAAOgD,YAAc,WACrB,cAACC,EAAA,EAAD,OAEJ,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,W,MCCDC,MAhBf,YAA4C,IAA1BC,EAAyB,EAAzBA,UAAUC,EAAe,EAAfA,QAAQnD,EAAO,EAAPA,KAC5B,OACI,sBAAKH,UAAU,UAAf,UACA,cAACsC,EAAA,EAAD,CAAQE,IAAOrC,EAAKsC,QACpB,sBAAKzC,UAAU,cAAf,UACI,+BACCG,EAAKgC,YACN,sBAAMnC,UAAU,cAAhB,SAA+B,IAAIuD,KAAJ,OAASF,QAAT,IAASA,OAAT,EAASA,EAAWG,UAAUC,sBAC7D,4BAAIH,W,wCCwELI,OAxEf,WACI,IAAMvD,EAAOmB,YAAYhB,GACnBqD,EAAYrC,YAAY9B,GACxBK,EAAcyB,YAAY5B,GAChC,EAAgC6B,mBAAS,IAAzC,mBAAOqC,EAAP,KAAiBC,EAAjB,KACA,EAA0BtC,mBAAS,IAAnC,mBAAOuC,EAAP,KAAcC,EAAd,KA0BA,OAxBArC,qBAAU,WACHiC,GACCpD,EAAGoB,WAAW,YACbK,IAAI2B,GACJhC,WAAW,YACXqC,QAAQ,YAAa,QACrBpC,YAAW,SAACC,GAAD,OACZgC,EAAYhC,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIE,gBAGhD,CAACyB,IAeA,sBAAK3D,UAAY,OAAjB,UACI,cAAC,EAAD,CAAYH,YAAeA,IAE3B,qBAAKG,UAAY,cAAjB,SACM4D,EAAS7B,KAAI,SAACuB,GAAD,OACX,cAAC,EAAD,CACID,UAAaC,EAAQD,UACrBC,QAAWA,EAAQW,SACnB9D,KAAQmD,EAAQnD,YAM5B,sBAAKH,UAAY,UAAjB,UACI,cAACkE,GAAA,EAAD,IACA,iCACI,uBACAC,MAASL,EACTM,SAAY,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOH,QACrCnB,YAAW,mBAAgBnD,KAC3B,wBACAI,QAnCI,SAACoE,GACjBA,EAAEE,iBAEFhE,EAAGoB,WAAW,YAAYK,IAAI2B,GAAWhC,WAAW,YAAYU,IAAI,CAChElC,KAAMA,EACN8D,SAAUH,EACVT,UAAW7C,IAASS,UAAUuD,WAAWC,oBAG7CV,EAAS,KA4BG/D,UAAY,aACZ0E,KAAO,SAJP,qBAQJ,sBAAK1E,UAAY,iBAAjB,UACI,cAAC2E,GAAA,EAAD,CAAcC,SACZ,UACF,cAACC,GAAA,EAAD,CAAKD,SAAW,UAChB,cAACE,GAAA,EAAD,CAAeF,SAAW,oB,gBCzD/BG,OAdf,WAII,OACI,sBAAK/E,UAAY,QAAjB,UACQ,6CACJ,cAACgF,GAAA,EAAD,CACI/E,QAPG,SAACoE,GACbnD,EAAK+D,gBAAgB9D,IAOZnB,UAAY,eAFhB,yBC0BGkF,OA7Bf,WACE,IAAM/E,EAAKmB,YAAYhB,GACjBR,EAASC,cAmBjB,OAlBE2B,qBAAU,WACRR,EAAKiE,oBAAmB,SAACC,GACvBC,QAAQC,IAAI,UAAUF,GAGpBtF,EADCsF,EACQhF,EAAM,CACbsC,IAAK0C,EAAS1C,IACd6C,MAAMH,EAASG,MACfpD,YAAYiD,EAASjD,YACrBM,MAAM2C,EAASI,WAIRnF,UAGf,CAACP,IAGC,qBAAKE,UAAU,MAAf,SACEG,EAAQ,yCAAG,cAAC,EAAD,IACb,cAAC,GAAD,IADU,OACO,cAAC,GAAD,OC/BRsF,GAAW5G,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZ4E,UAAW,KACX9D,YAAa,MAEfX,SAAU,CACRwG,eAAiB,SAACtG,EAAOC,GACvBD,EAAMuE,UAAYtE,EAAOC,QACzBF,EAAMS,YAAcR,EAAOC,YAUlBmG,IALmBA,GAASlG,QAA5BmG,eAKAD,GAAf,SCjBeE,eAAe,CAC5BC,QAAS,CACPzF,KAAM0F,EACNpG,KAAMqG,EACNC,IAAIC,MCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.18713c65.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState:{\r\n    chatId:null,\r\n    chatName: null\r\n  },\r\n \r\n  reducers: {\r\n   setChatInfo:(state,action)=>{\r\n       state.chatId=action.payload.chatId\r\n       state.chatName=action.payload.chatName\r\n   }\r\n  },\r\n});\r\n\r\nexport const {setChatInfo}=chatSlice.actions\r\n\r\nexport const selectChatId = (state) => state.chat.chatId;\r\nexport const selectChatName=(state)=>state.chat.chatName;\r\n\r\nexport default chatSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatInfo } from '../features/chatSlice';\r\nimport './SideChannel.css'\r\nfunction SideChannel({id,channelName}){\r\n    const dispatch=useDispatch()\r\n            return (\r\n            <div className=\"sideChannelBar\" onClick={()=>dispatch\r\n            (setChatInfo({\r\n                chatId:id,\r\n                chatName:channelName\r\n            }))}>\r\n            <h4><span className=\"sideChannelView\">#\r\n    </span>{channelName}</h4>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default SideChannel;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState:{\n    user:null,\n  },\n \n  reducers: {\n    login: (state,action) => {\n    \n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login,logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import firebase from 'firebase'\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDrZv9mpBjFeJykC7oeVaiRyO5zKVe7mko\",\r\n    authDomain: \"indiaghumochat.firebaseapp.com\",\r\n    projectId: \"indiaghumochat\",\r\n    storageBucket: \"indiaghumochat.appspot.com\",\r\n    messagingSenderId: \"917609179523\",\r\n    appId: \"1:917609179523:web:65addeea928e996d506eb6\",\r\n    measurementId: \"G-CQGNJ07K13\"\r\n  };\r\n const firebaseApp=firebase.initializeApp(firebaseConfig)\r\n\r\n const db=firebaseApp.firestore()\r\n\r\n const auth=firebase.auth()\r\n\r\n const provider=new firebase.auth.GoogleAuthProvider()\r\n\r\n export {auth,provider}\r\n export default db","import React,{useState, useEffect} from \"react\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SideChannel from \"./SideChannel\";\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport  InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport HeadSetIcon from '@material-ui/icons/Headset'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport './Sidebar.css'\r\nimport db,{auth} from '../components/firebase'\r\nfunction Sidebar(){\r\n    const user=useSelector(selectUser);\r\n    const [channels,setChannels]=useState([])\r\n    \r\n    useEffect(()=> {\r\n        db.collection('channels').onSnapshot(snapshot=>(\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id:doc.id,\r\n                channel:doc.data()\r\n            })))\r\n        ))\r\n    })\r\n    const handleChat=()=>{\r\n        const channelName=prompt(\"Enter a Channel Name\")\r\n        if(channelName){\r\n            db.collection('channels').add({\r\n                channelName:channelName\r\n            })\r\n        }\r\n    }\r\n    return(\r\n    <div className=\"sidebar\">\r\n    <div className=\"sidebar_above\">\r\n        <h3>{user.displayName}</h3>\r\n        <ExpandMoreIcon />\r\n        </div>\r\n    <div className=\"channel\">\r\n    <div className=\"channelHeader\">\r\n    <div className=\"sidebar_header\">\r\n    <h4>Channel</h4>\r\n    </div>\r\n    <AddIcon onClick={handleChat}\r\n    className=\"sidebar_add\"/>\r\n    </div>\r\n    <div className=\"channelList\">\r\n    {\r\n        channels.map(({id,channel})=>(\r\n            <SideChannel \r\n            key={id}\r\n            id={id}\r\n            channelName ={channel.channelName}\r\n            />\r\n        ))\r\n    }\r\n   \r\n    </div>\r\n     </div>\r\n    <div className=\"voice_channel\">\r\n    <SignalCellularAltIcon className=\"sideVoiceIcon\"/>\r\n        <div className=\"sideVoiceInfo\">\r\n            <h3>Voice Connected</h3>\r\n                 <p>Stream</p>\r\n        </div>\r\n    <div className = \"side_voiceIcon\">\r\n    <InfoOutlinedIcon />\r\n     <CallIcon />\r\n    </div>\r\n    </div>\r\n    <div className=\"sideProfile\">\r\n        <Avatar onClick={()=>auth.signOut()}  src={user.photo} \r\n        className=\"side_profileAvatar\"/>\r\n    </div> \r\n    <div className=\"sideProfileInfo\">\r\n        <h3>{user.displayName}</h3>\r\n        <p>#{user.uid.substring(0,5)}</p>\r\n    </div>\r\n    <div className=\"sideProfileIcons\">\r\n        <MicIcon />\r\n        <HeadSetIcon />\r\n        <SettingsIcon />\r\n    </div>\r\n    </div>\r\n    );\r\n}\r\nexport default Sidebar;","import React from 'react';\r\nimport { EditLocation, HelpRounded, Notifications, PeopleAltRounded, SearchRounded, SendRounded } from '@material-ui/icons'\r\nimport './ChatHeader.css';\r\nfunction ChatHeader({channelName}){\r\n            return (\r\n            <div className=\"chatHeader\">\r\n            <div className=\"chatLeft\">\r\n            <h3><span className=\"chatHeader_hash\">#</span>{channelName}</h3> \r\n            </div>\r\n           <div className=\"chatRight\">\r\n               <Notifications />\r\n               <EditLocation />\r\n               <PeopleAltRounded />\r\n               <div className = \"chatSearch\">\r\n                    <input placeholder = \"search\" />\r\n                    <SearchRounded />\r\n                </div>\r\n                <SendRounded />\r\n                <HelpRounded />\r\n           </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default ChatHeader;","import React from 'react';\r\nimport { Avatar } from '@material-ui/core'\r\nimport './Message.css'\r\nfunction Message({timestamp,message,user}) {\r\n        return (\r\n            <div className=\"message\">\r\n            <Avatar src = {user.photo} /> \r\n            <div className=\"messageInfo\">\r\n                <h4>\r\n                {user.displayName}\r\n                <span className=\"MessageTime\">{new Date(timestamp?.toDate()).toLocaleString()}</span></h4>\r\n                <p>{message}</p>\r\n            </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport \"./Chat.css\"\r\nimport ChatHeader from './ChatHeader';\r\nimport Message from './Message';\r\nimport {selectChatId, selectChatName} from '../features/chatSlice' \r\nimport { selectUser } from '../features/userSlice'\r\nimport { AddCircle, CardGiftcard, EmojiEmotions, Gif } from '@material-ui/icons'\r\nimport { useSelector } from 'react-redux'\r\nimport db from './firebase'\r\nimport firebase from 'firebase'\r\nfunction Chat() {\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectChatId)\r\n    const channelName = useSelector(selectChatName)\r\n    const [messages, setMessages] = useState([])\r\n    const [input, setInput] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if(channelId){\r\n            db.collection('channels')\r\n            .doc(channelId)\r\n            .collection('messages')\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .onSnapshot((snapshot) => \r\n            setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            )\r\n        }\r\n    }, [channelId])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            user: user,\r\n            messsage: input,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setInput('')\r\n    }\r\n\r\n    return (\r\n        <div className = \"chat\">\r\n            <ChatHeader channelName = {channelName}/>\r\n\r\n            <div className = \"chatMessage\">\r\n                { messages.map((message) => (\r\n                    <Message \r\n                        timestamp = {message.timestamp}\r\n                        message = {message.messsage}\r\n                        user = {message.user}\r\n                    />\r\n                ))}\r\n                \r\n\r\n            </div>\r\n            <div className = \"Addchat\">\r\n                <AddCircle />\r\n                <form>\r\n                    <input \r\n                    value = {input}\r\n                    onChange = {(e) => setInput(e.target.value)}\r\n                    placeholder = {`message #${channelName}`}/>\r\n                    <button \r\n                    onClick = {sendMessage}\r\n                    //disabled = {!channelId}\r\n                    className = \"ChatButton\"\r\n                    type = \"submit\">\r\n                        send\r\n                    </button>\r\n                </form>\r\n                <div className = \"chat_inputIcon\">\r\n                    <CardGiftcard fontSize\r\n                    = \"large\"/>\r\n                    <Gif fontSize = \"large\" />\r\n                    <EmojiEmotions fontSize = \"large\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Login.css'\r\nimport { auth, provider } from './firebase'\r\n\r\nfunction Login() {\r\n    const signIn = (e) => {\r\n       auth.signInWithPopup(provider)\r\n    }\r\n    return (\r\n        <div className = \"login\">\r\n                <h1>INDIA GHUMO</h1>\r\n            <Button \r\n                onClick = {signIn}\r\n                className = \"login_button\">Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React,{useEffect} from 'react';\nimport './App.css';\nimport Sidebar from \"./components/Sidebar\";\nimport Chat from \"./components/Chat\"\nimport { login, logout, selectUser } from './features/userSlice';\nimport Login from './components/Login';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {auth} from '../src/components/firebase'\n\nfunction App() {\n  const user=useSelector(selectUser)\n  const dispatch=useDispatch()\n  useEffect(()=>{\n    auth.onAuthStateChanged((authUser)=>{\n      console.log('user is',authUser)\n\n      if(authUser){\n        dispatch(login({\n          uid: authUser.uid,\n          email:authUser.email,\n          displayName:authUser.displayName,\n          photo:authUser.photoURL\n        }))\n      } \n      else{\n        dispatch(logout())\n      }\n  })\n},[dispatch])\n \nreturn (\n    <div className=\"App\">\n    { user ? (<> <Sidebar />\n    <Chat /> </>) : (<Login />)}\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo : (state, action) => {\r\n      state.channelId = action.payload\r\n      state.channelName = action.payload\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.channelId;\r\nexport const selectChannelName = (state) => state.channelName;\r\n\r\nexport default appSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice'\nimport chatReducer from '../features/chatSlice';\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    chat: chatReducer,\n    app:appReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store  from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}